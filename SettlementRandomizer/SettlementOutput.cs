// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SettlementRandomizer
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using NPCRandomizer;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class SettlementOutput : SettlementOutputBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<!DOCTYPE html>
<html>
    <head>
        <title>Random Settlement</title>
        <link href=""settlement.css"" rel=""stylesheet"">
		<style>
		body {
    background: #bbb;
}

table, div, p {
    box-shadow: 4px 2px 2px grey;
    padding: 4px;
    background: white;
}
.container {
    
    width: 80%;
    margin-left: 10%;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: minmax(2em, auto);
    grid-gap: 4px;
}

.transparent {
    background: rgba(0,0,0,0);
    box-shadow: unset;
}

h1 {
    background: white;
    grid-column: 1/5;
    text-align: center;
    padding: 4px;
    margin: 0px;
}

h2 {
    padding: 4px;
    margin: 0px;
}
.general {
    text-align: center;
    padding: 4px;
    margin: 0px;
}

.lg-block{
    grid-row: 3;
    grid-column: span 2;
}

ul {
    margin: 10px;
    padding: 0px;
}

li {
    list-style-type: none;
}

.span {
    grid-column: span 2;
}

.row {
    border-bottom: 1px solid black;
}

.block {
    max-height: 10em;
    align-self: start;
}

.block div {
    box-shadow: unset;
}

.items {
    max-height: 10em;
    overflow: scroll;
}
</style>
    </head>
    <body>
        <div class=""container transparent"">
            <h1>");
            
            #line 95 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Settle.Name));
            
            #line default
            #line hidden
            this.Write("</h1>\r\n            <p class=\"general\">Size: ");
            
            #line 96 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Settle.Size));
            
            #line default
            #line hidden
            this.Write("</p>\r\n            <p class=\"general\">Role: ");
            
            #line 97 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Settle.Role));
            
            #line default
            #line hidden
            this.Write("</p>\r\n            <p class=\"general\">Population: ");
            
            #line 98 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Settle.Population));
            
            #line default
            #line hidden
            this.Write("</p>\r\n            <p class=\"general\">Oblast: ");
            
            #line 99 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Settle.NearestCity));
            
            #line default
            #line hidden
            this.Write("</p>\r\n            <div class=\"lg-block\">\r\n                <h2>Demographics</h2>\r\n" +
                    "                <ul>\r\n                    ");
            
            #line 103 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (KeyValuePair<string, int> kvp in Settle.Demographics) { 
            
            #line default
            #line hidden
            this.Write("                        <li>");
            
            #line 104 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 104 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                    ");
            
            #line 105 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            <div class=\"lg-block\">\r\n  " +
                    "              <h2>Tech Levels</h2>\r\n                <ul>\r\n                    ");
            
            #line 111 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (KeyValuePair<string, int> kvp in Settle.TechLevels) { 
            
            #line default
            #line hidden
            this.Write("                        <li>");
            
            #line 112 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Key));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 112 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kvp.Value));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                    ");
            
            #line 113 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            <!-- list of NPC tables --" +
                    ">\r\n            ");
            
            #line 117 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (PersonData npc in Settle.NPCs) { 
            
            #line default
            #line hidden
            this.Write("                <div class=\"block\">\r\n                        <div class=\"row\"><b>" +
                    "");
            
            #line 119 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Name));
            
            #line default
            #line hidden
            this.Write("</b></div>\r\n                        <div class=\"row\">");
            
            #line 120 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Age));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 120 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Gender));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 120 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Race));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 120 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Subrace != ""? "(" + npc.Subrace + ")" : ""));
            
            #line default
            #line hidden
            this.Write(" </div>\r\n                        <div class=\"row\">Religiosity: ");
            
            #line 121 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Religion));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div class=\"row\">Profession: ");
            
            #line 122 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Profession));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div>Personality: ");
            
            #line 123 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(npc.Personality));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                   \r\n                </div>\r\n            ");
            
            #line 126 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            <div class=\"items\">\r\n                <h2>Weapons</h2>\r\n              " +
                    "  <ul>\r\n                    ");
            
            #line 130 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Crafting:Weapons"]) { 
            
            #line default
            #line hidden
            this.Write("                        <li>");
            
            #line 131 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                    ");
            
            #line 132 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n                <h2>Armor</h2>\r\n                <ul>\r\n    " +
                    "                    ");
            
            #line 136 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Crafting:Armor"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 137 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 138 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n                <h2>Ornamental</h2>\r\n                <ul>\r" +
                    "\n                        ");
            
            #line 142 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Crafting:Ornamental"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 143 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 144 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            <div class=\"items\">\r\n     " +
                    "           <h2>Arcane Spells</h2>\r\n                <ul>\r\n                       " +
                    " ");
            
            #line 150 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Arcane:Spells"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 151 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 152 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n                <h2>Enchanting</h2>\r\n                <ul>\r" +
                    "\n                        ");
            
            #line 156 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Arcane:Enchanting"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 157 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 158 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            <div class=\"items\">\r\n     " +
                    "           <h2>Divine Spells</h2>\r\n                <ul>\r\n                       " +
                    " ");
            
            #line 164 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Divine:Spells"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 165 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 166 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n                <h2>Potions</h2>\r\n                <ul>\r\n  " +
                    "                      ");
            
            #line 170 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Potions:All"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 171 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 172 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            <div class=\"items\">\r\n     " +
                    "           <h2>Lodging</h2>\r\n                <ul>\r\n                        ");
            
            #line 178 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Lodging:All"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 179 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 180 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            <div class=\"items\">\r\n     " +
                    "           <h2>Specialty Items</h2>\r\n                <ul>\r\n                     " +
                    "   ");
            
            #line 186 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Items:Specialty"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 187 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                        ");
            
            #line 188 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            ");
            
            #line 191 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 if (ShowCommonItems) { 
            
            #line default
            #line hidden
            this.Write("            <div class=\"items\">\r\n                <h2>Common Items</h2>\r\n         " +
                    "       <ul>\r\n                    \r\n                    ");
            
            #line 196 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 foreach (string item in Settle.AvailableItems["Items:General"]) { 
            
            #line default
            #line hidden
            this.Write("                            <li>");
            
            #line 197 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            this.Write("</li>\r\n                    ");
            
            #line 198 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                </ul>\r\n            </div>\r\n            ");
            
            #line 201 "C:\Users\bhall\Documents\Visual Studio 2017\Projects\SettlementRandomizer\SettlementRandomizer\SettlementOutput.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            \r\n        </div>\r\n    </body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class SettlementOutputBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
